(function(diy){diy.stdlib="(define not (lambda (b) (if b #f #t)))  (define nil '())  (define or (lambda (a b) (if (eq a #t) #t (if (eq b #t) #t #f))))  (define and (lambda (a b) (if (eq a #f) #f (if (eq b #f) #f #t))))  (define xor (lambda (a b) (if (and a b) #f (if (or a b) #t #f))))  (define >= (lambda (a b) (if (> a b) #t (if (eq a b) #t #f))))  (define <= (lambda (a b) (not (> a b))))  (define < (lambda (a b) (not (>= a b))))  (define sum (lambda (lst) (if (empty lst) 0 (+ (head lst) (sum (tail lst))))))  (define length (lambda (lst) (if (empty lst) 0 (+ 1  (length (tail lst))))))  (define append (lambda (fst snd) (if (empty fst) snd (cons (head fst) (append (tail fst) snd)))))  (define filter (lambda (f lst) (if (empty lst) nil (if (f (head lst)) (cons (head lst) (filter f (tail lst))) (filter f (tail lst))))))  (define map (lambda (f lst) (if (empty lst) nil (cons (f (head lst)) (map f (tail lst))))))  (define reverse-aux (lambda (lst acc) (if (empty lst) acc (reverse-aux (tail lst) (cons (head lst) acc)))))  (define reverse (lambda (lst) (reverse-aux lst nil)))  (define range (lambda (from to) (if (> from to) nil (cons from (range (+ from 1) to)))))  (define less (lambda (lst pivot) (filter (lambda (a) (<= a pivot)) lst)))  (define greater (lambda (lst pivot) (filter (lambda (a) (> a pivot)) lst)))  (define sort (lambda (lst) (if (empty lst) nil (append (sort (less (tail lst) (head lst))) (cons (head lst)   (sort (greater (tail lst) (head lst)))))))) "})(typeof exports==="undefined"?this["diy"]=this["diy"]||{}:exports);(function(diy){function Closure(env,params,body){this.env=env;this.params=params;this.body=body}diy.Closure=Closure})(typeof exports==="undefined"?this["diy"]=this["diy"]||{}:exports);(function(diy){function clone(obj){if(null==obj||"object"!=typeof obj)return obj;if(obj instanceof Array){var copy=[];for(var i=0,len=obj.length;i<len;i++){copy[i]=clone(obj[i])}return copy}var copy=new obj.constructor;extend(copy,obj);return copy}function extend(obj,vars){for(var v in vars){if(vars.hasOwnProperty(v))obj[v]=vars[v]}}function Environment(vars){this.vars=vars||{}}Environment.prototype.lookup=function(v){if(!this.vars.hasOwnProperty(v))throw new Error("Could not find symbol "+v+" in environment");return clone(this.vars[v])};Environment.prototype.extend=function(vars){var newEnv=clone(this.vars);extend(newEnv,vars);return new Environment(newEnv)};Environment.prototype.set=function(v,val){if(this.vars.hasOwnProperty(v))throw new Error("Property "+v+" already defined");this.vars[v]=val};diy.Environment=Environment})(typeof exports==="undefined"?this["diy"]=this["diy"]||{}:exports);(function(diy){var Closure=typeof require==="function"?require("./closure").Closure:diy.Closure;function isSymbol(x){return typeof x==="string"}function isList(x){return x instanceof Array}function isBoolean(x){return typeof x==="boolean"}function isInteger(x){return typeof x==="number"}function isClosure(x){return x instanceof Closure}function isAtom(x){return isSymbol(x)||isInteger(x)||isBoolean(x)||isClosure(x)}diy.Types={isSymbol:isSymbol,isList:isList,isBoolean:isBoolean,isInteger:isInteger,isClosure:isClosure,isAtom:isAtom}})(typeof exports==="undefined"?this["diy"]=this["diy"]||{}:exports);(function(diy){function isNumber(n){return/^\d+$/.test(n)}function toNumber(n){return parseInt(n,10)}function parse(source){source=trim(source);if(source==="#t")return true;else if(source==="#f")return false;else if(isNumber(source))return toNumber(source);else if(source[0]==="(")return to_list(source);else if(source[0]==="'")return["quote",parse(source.substr(1))];else return source}function parse_multiple(source){return split_exps(source).map(function(exp){return parse(exp)})}function to_list(source){var end=matching_paren(source);if(end===source.length)throw new Error("Expected EOF: "+source);var exps=split_exps(source.substr(1,end-1));exps=exps.map(function(exp){return parse(exp)});return exps}function matching_paren(source){if(source[0]!=="(")throw new Error("Expected '(' as first character, got "+source);var pos=0;var open_brackets=1;while(open_brackets>0){pos+=1;if(pos==source.length)throw new Error("Incomplete expression: ",source);if(source[pos]==="(")open_brackets++;if(source[pos]===")")open_brackets--}return pos}function split_exps(source){source=trim(source);var exps=[];while(source.length>0){var res=first_exp(source);exps.push(res.exp);source=res.rest}return exps}function first_exp(source){source=trim(source);if(source[0]==="'"){var tmp=first_exp(source.substr(1));return{exp:source[0]+tmp.exp,rest:tmp.rest}}else if(source[0]==="("){var end=matching_paren(source);return{exp:source.substr(0,end+1),rest:source.substr(end+1)}}var single_exp=/^[^\s)']+/g;var match=single_exp.exec(source);var end=single_exp.lastIndex;var atom=source.substr(0,end);return{exp:atom,rest:source.substr(end)}}function trim(str){return str.replace(/^\s+|\s+$/g,"")}function unparse(ast){if(isBoolean(ast)){return ast?"#t":"#f"}else if(isList(ast)){if(ast.length>0&&ast[0]==="quote")return"'"+unparse(ast[1]);else return"("+ast.map(function(a){return unparse(a)}).join(" ")+")"}return ast+""}diy.Parser={parse:parse,parse_multiple:parse_multiple,unparse:unparse,first_exp:first_exp}})(typeof exports==="undefined"?this["diy"]=this["diy"]||{}:exports);(function(diy){var Closure=typeof require==="function"?require("./closure").Closure:diy.Closure;var types=typeof require==="function"?require("./types").Types:diy.Types;for(var m in types){if(types.hasOwnProperty(m))this[m]=types[m]}function evaluate(ast,env){console.log(ast);if(isList(ast))return evaluateList(ast,env);else if(isBoolean(ast))return ast;else if(isSymbol(ast)){return env.lookup(ast)}return ast}function evaluateList(ast,env){if(form(ast,"quote")){return ast[1]}else if(form(ast,"atom")){return isAtom(evaluate(ast[1],env))}else if(form(ast,"eq")){return eval_eq(ast,env)}else if(form(ast,"+","-","/","*","mod",">")){return eval_math(ast,env)}else if(form(ast,":")){return eval_expansion(ast,env)}else if(form(ast,"if")){return eval_if(ast,env)}else if(form(ast,"define")){return extend_env(ast,env)}else if(form(ast,"lambda")){return eval_lambda(ast,env)}else if(form(ast,"cons")){var rest=evaluate(ast[2],env);rest.unshift(evaluate(ast[1],env));return rest}else if(form(ast,"head")){var lst=evaluate(ast[1],env);if(lst.length===0)throw new Error("List is empty");return lst[0]}else if(form(ast,"tail")){var lst=evaluate(ast[1],env);return lst.slice(1)}else if(form(ast,"empty")){var lst=evaluate(ast[1],env);return lst.length===0}else if(isSymbol(ast[0])||isList(ast[0])){var closure=evaluate(ast[0],env);var newAst=ast.slice(1);newAst.unshift(closure);return eval_functionCall(newAst,env)}else if(isClosure(ast[0])){return eval_functionCall(ast,env)}throw new Error(ast[0]+" is not a function")}function form(ast){return Array.prototype.slice.call(arguments,1).indexOf(ast[0])>=0}function eval_eq(ast,env){var o1=evaluate(ast[1],env);var o2=evaluate(ast[2],env);return o1===o2&&isAtom(o1)&&isAtom(o2)}function eval_math(ast,env){var operator=ast[0];var o1=evaluate(ast[1],env);var o2=evaluate(ast[2],env);if(!isInteger(o1)&&isInteger(o2))throw new Error("Both operands must be numbers ("+o1+", "+o2+")");switch(operator){case"+":return o1+o2;case"-":return o1-o2;case"/":return Math.floor(o1/o2);case"*":return o1*o2;case"mod":return o1%o2;case">":return o1>o2}}function eval_expansion(ast,env){var letter=ast[1][0];if(letter!==ast[2][0])throw new Error("Cannot expand rows, only columns.");var from=parseInt(ast[1][1],10);var to=parseInt(ast[2][1],10);if(from>to)throw new Error("Cannot expand expression (: "+ast[1]+" "+ast[2]+"). Lower value must be first.");var a=[];for(var i=from;i<=to;i++){a.push(env.lookup(letter+i))}console.log(a);return evaluate(["quote",a],env)}function eval_if(ast,env){if(evaluate(ast[1],env))return evaluate(ast[2],env);return evaluate(ast[3],env)}function eval_lambda(ast,env){if(!isList(ast[1]))throw new Error(ast[1]+" is not a list");if(ast.length!=3)throw new Error("Wrong number of arguments: "+ast);return new Closure(env,ast[1],ast[2])}function eval_functionCall(ast,env){var closure=ast[0];arguments=ast.slice(1).map(function(arg){return evaluate(arg,env)});if(arguments.length!=closure.params.length)throw new Error("Wrong number of arguments. Expected "+closure.params.length+", got "+arguments.length);env=closure.env.extend(merge(closure.params,arguments));return evaluate(closure.body,env)}function extend_env(ast,env){if(ast.length!==3)throw new Error("Wrong number of arguments");if(!isSymbol(ast[1]))throw new Error("Non-symbol: "+ast[1]);env.set(ast[1],evaluate(ast[2],env));return ast[1]}function merge(a1,a2){var o={};for(var i=0;i<a1.length;i++){o[a1[i]]=a2[i]}return o}diy.Evaluator={form:form,merge:merge,evaluate:evaluate}})(typeof exports==="undefined"?this["diy"]=this["diy"]||{}:exports);